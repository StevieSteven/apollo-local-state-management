/* tslint:disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  article?: GQLArticle;
}

export interface GQLArticle {
  id: number;
  title?: string;
  content?: string;
}

export interface GQLMutation {
  changeTitleOfArticle?: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Article?: GQLArticleTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  article?: QueryToArticleResolver<TParent>;
}

export interface QueryToArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArticleTypeResolver<TParent = any> {
  id?: ArticleToIdResolver<TParent>;
  title?: ArticleToTitleResolver<TParent>;
  content?: ArticleToContentResolver<TParent>;
}

export interface ArticleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArticleToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  changeTitleOfArticle?: MutationToChangeTitleOfArticleResolver<TParent>;
}

export interface MutationToChangeTitleOfArticleArgs {
  title: string;
}
export interface MutationToChangeTitleOfArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToChangeTitleOfArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
}
